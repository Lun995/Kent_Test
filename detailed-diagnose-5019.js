const http = require('http');
const https = require('https');
const { HubConnectionBuilder, LogLevel } = require('@microsoft/signalr');

// Ë©≥Á¥∞Ë®∫Êñ∑ localhost:5019 ÁöÑ SignalR ÊúçÂãôÂô®
async function detailedDiagnose5019() {
    console.log('üîç Ë©≥Á¥∞Ë®∫Êñ∑ SignalR ÊúçÂãôÂô®...\n');
    console.log('üìç ÁõÆÊ®ôÊúçÂãôÂô®: localhost:5019');
    console.log('‚è∞ Ë®∫Êñ∑ÊôÇÈñì:', new Date().toLocaleString());
    console.log('');

    // 1. Ê™¢Êü• HTTP ÊúçÂãôÂô®
    console.log('1Ô∏è‚É£ Ê™¢Êü• HTTP ÊúçÂãôÂô®...');
    try {
        const response = await new Promise((resolve, reject) => {
            const req = http.get('http://localhost:5019', (res) => {
                resolve(res);
            });
            req.on('error', reject);
            req.setTimeout(5000, () => {
                req.destroy();
                reject(new Error('Timeout'));
            });
        });
        
        console.log(`‚úÖ HTTP ÊúçÂãôÂô®ÂõûÊáâÊ≠£Â∏∏ (ÁãÄÊÖãÁ¢º: ${response.statusCode})`);
        console.log(`üìã ÂõûÊáâÊ®ôÈ†≠:`, response.headers);
        
        // Ê™¢Êü•ÊòØÂê¶ÊúâÈáçÂÆöÂêë
        if (response.statusCode === 301 || response.statusCode === 302 || response.statusCode === 307) {
            console.log('üîÑ Ê™¢Ê∏¨Âà∞ÈáçÂÆöÂêëÔºåÊúçÂãôÂô®ÂèØËÉΩ‰ΩøÁî® HTTPS');
        }
    } catch (error) {
        console.log(`‚ùå HTTP ÊúçÂãôÂô®ÁÑ°Ê≥ïÈÄ£Á∑ö: ${error.message}`);
    }

    // 2. Ê™¢Êü• HTTPS ÊúçÂãôÂô®
    console.log('\n2Ô∏è‚É£ Ê™¢Êü• HTTPS ÊúçÂãôÂô®...');
    try {
        const response = await new Promise((resolve, reject) => {
            const req = https.get('https://localhost:5019', {
                rejectUnauthorized: false // ÂøΩÁï• SSL ÊÜëË≠âÈ©óË≠â
            }, (res) => {
                resolve(res);
            });
            req.on('error', reject);
            req.setTimeout(5000, () => {
                req.destroy();
                reject(new Error('Timeout'));
            });
        });
        
        console.log(`‚úÖ HTTPS ÊúçÂãôÂô®ÂõûÊáâÊ≠£Â∏∏ (ÁãÄÊÖãÁ¢º: ${response.statusCode})`);
        console.log(`üìã ÂõûÊáâÊ®ôÈ†≠:`, response.headers);
    } catch (error) {
        console.log(`‚ùå HTTPS ÊúçÂãôÂô®ÁÑ°Ê≥ïÈÄ£Á∑ö: ${error.message}`);
    }

    // 3. Ê∏¨Ë©¶‰∏çÂêåÁöÑ Hub Ë∑ØÂæë
    console.log('\n3Ô∏è‚É£ Ê∏¨Ë©¶‰∏çÂêåÁöÑ Hub Ë∑ØÂæë...');
    const hubPaths = [
        '/hubs/connectionuser',
        '/signalrhub',
        '/hub',
        '/chathub',
        '/notificationhub',
        '/hubs/chathub',
        '/hubs/notificationhub'
    ];

    for (const path of hubPaths) {
        console.log(`\nüîç Ê∏¨Ë©¶Ë∑ØÂæë: ${path}`);
        
        try {
            const connection = new HubConnectionBuilder()
                .withUrl(`https://localhost:5019${path}`, {
                    skipNegotiation: false,
                    transport: 1
                })
                .configureLogging(LogLevel.Warning)
                .build();

            await connection.start();
            console.log(`‚úÖ Ë∑ØÂæë ${path} ÂèØÁî®`);
            console.log(`üìä ÈÄ£Á∑öÁãÄÊÖã: ${connection.state}`);
            console.log(`üÜî ConnectionId: ${connection.connectionId}`);
            
            // Ê∏¨Ë©¶Âü∫Êú¨ÂäüËÉΩ
            try {
                await connection.invoke('SendMessage', { message: 'Test connection' });
                console.log('‚úÖ Ê∂àÊÅØÁôºÈÄÅÂäüËÉΩÊ≠£Â∏∏');
            } catch (error) {
                console.log(`‚ö†Ô∏è Ê∂àÊÅØÁôºÈÄÅÂäüËÉΩ: ${error.message}`);
            }

            await connection.stop();
            console.log(`‚úÖ Ë∑ØÂæë ${path} Ê∏¨Ë©¶ÂÆåÊàê`);
            break; // ÊâæÂà∞ÂèØÁî®Ë∑ØÂæëÂæåÂÅúÊ≠¢Ê∏¨Ë©¶
        } catch (error) {
            console.log(`‚ùå Ë∑ØÂæë ${path} ‰∏çÂèØÁî®: ${error.message}`);
        }
    }

    // 4. Ê™¢Êü• CORS Ë®≠ÂÆö
    console.log('\n4Ô∏è‚É£ Ê™¢Êü• CORS Ë®≠ÂÆö...');
    try {
        const response = await new Promise((resolve, reject) => {
            const req = http.request({
                hostname: 'localhost',
                port: 5019,
                path: '/hubs/connectionuser',
                method: 'OPTIONS',
                headers: {
                    'Origin': 'http://localhost:3000',
                    'Access-Control-Request-Method': 'POST',
                    'Access-Control-Request-Headers': 'Content-Type'
                }
            }, (res) => {
                resolve(res);
            });
            req.on('error', reject);
            req.setTimeout(5000, () => {
                req.destroy();
                reject(new Error('Timeout'));
            });
            req.end();
        });
        
        console.log(`‚úÖ CORS È†êÊ™¢Ë´ãÊ±ÇÂõûÊáâ (ÁãÄÊÖãÁ¢º: ${response.statusCode})`);
        console.log(`üìã CORS Ê®ôÈ†≠:`, {
            'Access-Control-Allow-Origin': response.headers['access-control-allow-origin'],
            'Access-Control-Allow-Methods': response.headers['access-control-allow-methods'],
            'Access-Control-Allow-Headers': response.headers['access-control-allow-headers']
        });
    } catch (error) {
        console.log(`‚ùå CORS Ê™¢Êü•Â§±Êïó: ${error.message}`);
    }

    // 5. Êèê‰æõÂª∫Ë≠∞
    console.log('\n5Ô∏è‚É£ ÊïÖÈöúÊéíÈô§Âª∫Ë≠∞:');
    console.log('1. Á¢∫Ë™çÊÇ®ÁöÑ ASP.NET Core ÊúçÂãôÂô®ÈÖçÁΩÆ:');
    console.log('   - Ê™¢Êü• Program.cs ‰∏≠ÁöÑ CORS Ë®≠ÂÆö');
    console.log('   - Á¢∫Ë™ç SignalR Hub Ë∑ØÂæëÈÖçÁΩÆ');
    console.log('   - Ê™¢Êü•ÊòØÂê¶ÂïüÁî®‰∫Ü HTTPS');
    
    console.log('\n2. Â∏∏Ë¶ãÁöÑÈÖçÁΩÆÂïèÈ°å:');
    console.log('   - CORS Ë®≠ÂÆö‰∏çÊ≠£Á¢∫');
    console.log('   - Hub Ë∑ØÂæë‰∏çÂåπÈÖç');
    console.log('   - SSL ÊÜëË≠âÂïèÈ°å');
    console.log('   - Èò≤ÁÅ´ÁâÜÈòªÊìã');
    
    console.log('\n3. Âª∫Ë≠∞ÁöÑ ASP.NET Core ÈÖçÁΩÆ:');
    console.log('```csharp');
    console.log('// Program.cs');
    console.log('var builder = WebApplication.CreateBuilder(args);');
    console.log('');
    console.log('// Ê∑ªÂä† CORS');
    console.log('builder.Services.AddCors(options =>');
    console.log('{');
    console.log('    options.AddPolicy("AllowAll", policy =>');
    console.log('    {');
    console.log('        policy.AllowAnyOrigin()');
    console.log('              .AllowAnyMethod()');
    console.log('              .AllowAnyHeader()');
    console.log('              .AllowCredentials();');
    console.log('    });');
    console.log('});');
    console.log('');
    console.log('// Ê∑ªÂä† SignalR');
    console.log('builder.Services.AddSignalR();');
    console.log('');
    console.log('var app = builder.Build();');
    console.log('');
    console.log('// ‰ΩøÁî® CORS');
    console.log('app.UseCors("AllowAll");');
    console.log('');
    console.log('// ÈÖçÁΩÆ SignalR Hub');
    console.log('app.MapHub<ConnectionUserHub>("/hubs/connectionuser");');
    console.log('');
    console.log('app.Run();');
    console.log('```');
}

// Âü∑Ë°åË®∫Êñ∑
detailedDiagnose5019().catch(console.error);

// ÂÑ™ÈõÖÈóúÈñâ
process.on('SIGINT', () => {
    console.log('\nüõë Ê≠£Âú®ÈóúÈñâË®∫Êñ∑...');
    process.exit(0);
}); 